name: Mirror Binary Assets

on:
    workflow_dispatch:
        inputs:
            binary_type:
                description: "Binary to mirror"
                required: true
                type: choice
                options:
                    - bazel_nojdk
                    - copy_directory
            version:
                description: "Version to mirror (e.g., 8.1.1 or v2.14.0)"
                required: true
                type: string
            tag_version:
                description: "Version for the release tag (e.g., 0.1.0)"
                required: false
                default: "0.1.0"
                type: string
    push:
        paths:
            - ".github/workflows/mirror-binaries.yml"
            - "binaries.yml"

jobs:
    prompt-for-input:
        if: github.event_name == 'push'
        runs-on: ubuntu-latest
        steps:
            - name: Trigger workflow_dispatch
              run: |
                  echo "Changes detected!"
                  echo "Please manually run the workflow with your desired inputs"
                  echo "No automatic updates will be performed"

    mirror-binary:
        if: github.event_name == 'workflow_dispatch'
        runs-on: ubuntu-latest
        permissions:
            contents: write
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Install dependencies
              run: npm install js-yaml

            - name: Set binary config
              id: config
              uses: actions/github-script@v7
              with:
                  script: |
                      const { getBinaryConfig } = require('./.github/workflows/scripts/release-utils.js');
                      const config = getBinaryConfig(context.payload.inputs.binary_type, context.payload.inputs.version);
                      Object.entries(config).forEach(([key, value]) => {
                        core.setOutput(key, value);
                      });

            - name: Download and compress binary
              id: download
              run: |
                  curl -L "${{ steps.config.outputs.url }}" -o "${{ steps.config.outputs.filename }}"
                  zip -9 "${{ steps.config.outputs.compressed }}" "${{ steps.config.outputs.filename }}"
                  echo "compressed_path=${{ steps.config.outputs.compressed }}" >> $GITHUB_OUTPUT

            - name: Check for existing release and update
              if: github.ref == 'refs/heads/main'
              id: check_release
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      console.log('Running on main branch, proceeding with release operations...');
                      const { generateReleaseBody } = require('./.github/workflows/scripts/release-utils.js');
                      const tagName = `v${{ github.event.inputs.tag_version }}`;
                      const dateString = new Date().toISOString().split('T')[0];
                      let releaseId, uploadUrl, releaseExists = false;

                      try {
                        const release = await github.rest.repos.getReleaseByTag({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          tag: tagName
                        });
                        
                        releaseId = release.data.id;
                        uploadUrl = release.data.upload_url;
                        releaseExists = true;
                        
                        const existingVersions = (release.data.body || '')
                          .split('\n')
                          .filter(line => line.startsWith('- '));
                        
                        await github.rest.repos.updateRelease({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          release_id: releaseId,
                          body: generateReleaseBody(
                            '${{ github.event.inputs.binary_type }}',
                            '${{ github.event.inputs.version }}',
                            dateString,
                            existingVersions
                          )
                        });
                      } catch (error) {
                        console.log(`Release with tag ${tagName} not found. Will create it.`);
                      }

                      core.setOutput('release_id', releaseId);
                      core.setOutput('release_exists', releaseExists.toString());
                      core.setOutput('upload_url', uploadUrl);

            - name: Skip release operations
              if: github.ref != 'refs/heads/main'
              run: |
                  echo "Not on main branch (current: ${GITHUB_REF#refs/heads/}), skipping release operations"
                  echo "This is expected behavior for non-main branches"

            - name: Create release if it doesn't exist
              if: github.ref == 'refs/heads/main' && steps.check_release.outputs.release_exists != 'true'
              id: create_release
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const { generateReleaseBody } = require('./.github/workflows/scripts/release-utils.js');
                      const tagName = `v${{ github.event.inputs.tag_version }}`;
                      const dateString = new Date().toISOString().split('T')[0];
                      let releaseId, uploadUrl;

                      try {
                        const release = await github.rest.repos.getReleaseByTag({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          tag: tagName
                        });
                        
                        releaseId = release.data.id;
                        uploadUrl = release.data.upload_url;
                      } catch (error) {
                        console.log(`Release with tag ${tagName} not found. Will create it.`);
                      }

                      await github.rest.repos.createRelease({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        tag_name: tagName,
                        name: tagName,
                        body: generateReleaseBody(
                          '${{ github.event.inputs.binary_type }}',
                          '${{ github.event.inputs.version }}',
                          dateString,
                          []
                        )
                      });

                      core.setOutput('release_id', releaseId);
                      core.setOutput('release_exists', 'false');
                      core.setOutput('upload_url', uploadUrl);

            - name: Delete existing asset if it exists
              if: github.ref == 'refs/heads/main'
              uses: actions/github-script@v7
              continue-on-error: true
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const { getBinaryConfig } = require('./.github/workflows/scripts/release-utils.js');
                      const config = getBinaryConfig(context.payload.inputs.binary_type, context.payload.inputs.version);
                      const releaseId = '${{ steps.check_release.outputs.release_id }}';

                      if (releaseId) {
                        await github.rest.repos.deleteReleaseAsset({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          release_id: releaseId,
                          asset_id: config.asset_id
                        });
                      }

            - name: Upload asset to release
              if: github.ref == 'refs/heads/main'
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const fs = require('fs');
                      const { getBinaryConfig } = require('./.github/workflows/scripts/release-utils.js');
                      const config = getBinaryConfig(context.payload.inputs.binary_type, context.payload.inputs.version);
                      const releaseId = '${{ steps.check_release.outputs.release_id }}';

                      if (releaseId) {
                        await github.rest.repos.uploadReleaseAsset({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          release_id: releaseId,
                          name: config.filename,
                          data: Buffer.from(fs.readFileSync(config.compressed)),
                          headers: {
                            'Content-Type': 'application/zip'
                          }
                        });
                      }
